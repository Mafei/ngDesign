/*******************************************************************************
 * Copyright (c) 2012-2014 Synflow SAS.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Matthieu Wipliez
 *    Nicolas Siret
 *******************************************************************************/
package com.synflow.test.pass.breaks;

task Fence {
	properties {
		num_states: 2, num_transitions: 2,
		test: {inp: [ null, 16, null ], outp: [ 0, 16, 16 ] }
	}

	in sync u16 inp; out sync u16 outp;

	u16 temp;

	void loop() {
		outp.write(temp);
		fence;
		temp = inp.read();
		outp.write(temp);
	}
}

task Idle1 {
	properties {
		num_states: 2, num_transitions: 2,
		test: {inp: [ null, 1, null, 5 ], outp: [ null, 2, null, 6 ] }
	}

	in sync u16 inp; out sync u16 outp;

	void loop() {
		idle(1);
		outp.write((u16) (inp.read + 1));
	}
}

task Idle2 {
	properties {
		num_states: 2, num_transitions: 2,
		test: {inp: [ ], outp: [ ] }
	}

	in u16 inp; out u16 outp;

	void loop() {
		idle(1);
		idle(1);
	}
}

task Idle3 {
	properties {
		num_states: 3, num_transitions: 3,
		test: {outp: [ 0 ] }
	}

	out u16 outp;

	void loop() {
		outp.write(0);
		f();
	}

	void f() {
		idle(2);
	}
}

task Idle4 {
	properties {
		num_states: 4, num_transitions: 5,
		test: {
			 inp: [ null, null, null, false, null, null, null, true ],
			outp: [ null, null, null,     4, null, null, null, 5 ]
		}
	}

	in sync bool inp;
	out sync u16 outp;

	void loop() {
		idle(3);
		if (inp.read) {
			outp.write(5);
		} else {
			outp.write(4);
		}
	}
}

task Idle5 {
	properties {
		num_states: 6, num_transitions: 8,
		test: {inp: [ false, null, null, null, true ], outp: [ 4, null, null, null, 5 ] }
	}

	in sync bool inp; out sync u16 outp;

	void loop() {
		if (inp.read) {
			outp.write(5);
		} else {
			outp.write(4);
		}
		idle(3);
		if (inp.read) {
			outp.write(5);
		} else {
			outp.write(4);
		}
		idle(1);
	}
}

task IdleMultipleTransitions {
	properties {
		num_states: 5, num_transitions: 6
	}

	in u5 a;
	
	void loop() {
		if (a.read > 5) {
			print('tata');
			a.read;
			a.read;
			a.read;
		} else {
			print('tata');
		}
		idle(1);
		print('toto');
	}

}

task MultipleReads {
	properties {
		num_states: 3, num_transitions: 3,
		test: {data: [ 1, 2, 3, 4, 5, 6 ], o: [ null, null, 3, null, null, 6 ] }
	}

	in sync i18 data; out sync i18 o;

	void loop() {
		i18 dummy = data.read();
		dummy = data.read();
		o.write(data.read());
	}
}

task MultipleReads2 {
	properties {
		num_states: 3, num_transitions: 3,
		test: {data: [ 1, 2, 3, 4, 5, 6 ], o: [ null, null, 3, null, null, 6 ] }
	}

	in sync i18 data; out sync i18 o;

	void loop() {
		data.read();
		data.read();
		o.write(data.read());
	}
}

task MultipleWrites {
	properties {
		num_states: 4, num_transitions: 4,
		test: {i: [ 1 ], o: [ 1, 2, 3, 4 ] }
	}

	in sync i18 i; out sync i18 o;

	void loop() {
		o.write(i.read());
		o.write(2);
		o.write(3);
		o.write(4);
	}
}

task MultipleWrites2 {
	properties {
		num_states: 4, num_transitions: 4,
		test: {i: [ 42, null, null, 4 ], o: [ 1, 2, 3, 4 ] }
	}

	in sync i18 i; out sync i18 o;

	void loop() {
		uchar count = (uchar) i.read();
		o.write(1);
		count++;
		count--;
		if (count > 0) {
			count = 0;
		} else {
			count = 3;
		}
		o.write(2);
		o.write(3);
		o.write(i.read());
	}
}
